Основы Git
==========

Git — это распределенная система контроля версий нашего кода, используемая для отслеживания и ведения истории изменения файлов в проекте. Чаще всего его используется для кода.

С помощью Git-a возможно откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий. Репозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все репозитории хранятся в определенных папках на жестком диске.

Каждая точка сохранения вашего проекта носит название - commit. У каждого commit-a есть hash (уникальный id) и комментарий. Из таких commit-ов собирается ветка. Ветка - это история изменений. У каждой ветки есть свое название. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них.

### Настройка данных пользователя

Прежде, чем пользоваться установленным Git, необходимо указать данные пользователя, от имени которого будут происходить все изменения. Для этого необходимо открыть командную строку и ввести две следующие команды:

```
# Установка имени (вместо данных в кавычках указывается действительная информация)
git config --global user.name "<имя>"

# Установка email
git config --global user.email "<адрес_электронной_почты>"
```

### Создание репозитория

Для того, чтобы создать репозиторий, в командной строке необходимо указать путь до папки с проектом и прописать команду инициализации репозитория:

```
# Указание пути к проекту
cd <путь_к_проекту>

# Создание/инициализация репозитория
git init
```

Сразу после создания репозитория в нём нет никаких файлов. Для их добавления используются следующие команды:

```
# Добавление конкретного файла в репозиторий
git add <путь_к_файлу_если_он_находится_не_в_корневой_папке/имя_файла>

# Добавление всех файлов в репозиторий
git add --all
# Или
git add .
```

После работы с файлом(-ами) репозитория для создания точки сохранения и отслеживания изменения файлов необходимо создать commit. Это делается с помощью следующей команды:

```
# Создание commit
git commit -m "<комментарии>"
```

### Работа с несколькими ветками

Создание отдельных веток помогает отделить реализацию новых функций или исправление багов от стабильной версии кода. Для создания новых веток и переключения между ними, используются следующие команды:

```
# Создание ветки
git branch <название_ветки>
# Переключение между ветками
git checkout <название_ветки>

# Создание ветки и мгновенный переход на неё
git checkout -b <название_ветки>
```

Для слияния экспериментальной и стабильной (master) веток необходимо прописать следующие команды:

```
# Переключение на master-ветку
git checkout master
# Обновление локальной ветки из репозитория GitHub
git pull origin master

# Слияние ветки, указываемой в команде, с текущей веткой
git merge <название_ветки>
```

Перед тем, как сливать новый merge, стоит обновить локальную ветку master, как это указано выше, во избежания дальнейших проблем.

Для того чтобы посмотреть текущее состояние ветки, например, какие файлы добавлены или не добавлены для создания commit, можно выполнить команду:

```
git status
```

### Добавление ветки изменений на GitHub

Другие пользователи не увидят вашу ветку, пока она не будет отправлена на удаленный репозиторий. Поэтому, после того как вы слили все изменения в master-ветку, необходимо отправить их на GitHub. Для этого обязательно нужно находиться в ветке master :

```
# Указание адреса origin репозитория в git (выполняется один раз в проекте)
git remote set-url origin <url_репозитория>
#Вместо url указывается, например, <https://github.com/darkennty/workspace.git> (скобочки убрать)

#Переключение на master-ветку
git checkout master
# Отправка изменений в GitHub
git push origin master
```

И ещё несколько полезных команд по работе с git.

```
# Просмотр истории ветки
git log

# Подсказки по популярным командам
git help
git help <название_команды>

# Удаление ненужной ветки
git branch -d <название_ветки>

# Просмотр изменений относительно двух веток
git diff <исходная_ветка><целевая_ветка>
```