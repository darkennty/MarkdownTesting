PlantUML
=================

PlantUML — это язык и инструмент для создания диаграмм, который использует текстовый формат для описания бизнес-процессов, диаграмм классов, состояний, последовательностей и многих других видов диаграмм. 

### Диаграмма классов

Диаграмма классов - это набор статических, декларативных элементов модели (используется при кодогенерации). Диаграммы классов отражают статическую структуру приложения: классы, интерфейсы и отношения между ними.

##### Работа с PlantUML
Для начала создания диаграммы классов с помощью инструмента PlantUML необходимо создать файл в корневой папке проекта с расширением ".puml". Это и будет файл с диаграммой классов.

В начале работы в файле указываем границы UML-диаграммы с помощью следующих комманд:

```
@startuml
#
# Код нашей диаграммы
#
@enduml
```

Для создания класса указываем ключевое слово "class", далее имя класса, после открываем фигурные скобки, подобно языку программирования Java.

```
class main {
    
}
```

Для того, чтобы добавить в класс переменную, принадлежащую этому классу, её инициализация прописывается в следующем порядке: знак указания области видимости, имя переменной, двоеточие, тип данных переменной. Все параметры указываются через пробел. Ниже приведены все знаки указания области видимости переменных:

```
+  public
-  private
#  protected
~  package
/  derived
```

Для методов инициализация прописывается в следующем порядке: знак указания области видимости; имя метода, в скобках после которого указываются поступаемые в метод переменные с типом их данных; двоеточие; тип возвращаемых данных метода. Все параметры указываются через пробел. Для методов используются те же указания области видимости, что и для переменных, кроме последнего ("/ derived").

##### Взаимосвязи между классами

Для указания взаимосвязей между классами используются следующие связи: ассоциация, наследование, реализация/имплементация, зависимость, агрегация, композиция.

**Наследование** показывает, что один из двух связанных классов (подтип) является частной формой другого (надтипа), который называется обобщением первого. Один класс (надтип) является родительским для другого (подтип).

**Ассоциация** показывает, что объекты одной сущности (класса) связаны с объектами другой сущности таким образом, что можно перемещаться от объектов одного класса к другому. Является общим случаем композиции и агрегации. 

**Реализация** — отношение между двумя элементами модели, в котором один элемент (клиент) реализует поведение, заданное другим (поставщиком). Реализация — отношение целое-часть. Поставщик, как правило, является абстрактным классом или классом-интерфейсом.

**Зависимость** — это слабая форма отношения использования, при которой изменение в спецификации одного влечёт за собой изменение другого, причём обратное не обязательно. Возникает, когда объект выступает, например, в форме параметра или локальной переменной. Зависимость может быть между экземплярами, классами или экземпляром и классом. 



